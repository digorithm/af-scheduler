package main

import (
	"bytes"
	"encoding/json"
	"fmt"
	"log"
	"net/http"
	"time"
)

/*
Notes: workout intervals are in unix time


*/

type Payload struct {
	ClubIdent string `json:"club_ident"`
	StartInt  int64  `json:"start_int"`
}

type User struct {
	Name       string
	Session    string
	SessionSig string
}

var (
	// Add your club id here. Should be a 4 digits number.
	ClubIdent = "YOUR_CLUB_ID"
)

const INTERVAL_PERIOD time.Duration = 24 * time.Hour

const HOUR_TO_TICK int = 00
const MINUTE_TO_TICK int = 00
const SECOND_TO_TICK int = 45

type jobTicker struct {
	timer *time.Timer
}

// Leave the program running and it will trigger the scheduler everyday at midnight.
func (t *jobTicker) updateTimer() {
	nextTick := time.Date(time.Now().Year(), time.Now().Month(),
		time.Now().Day(), HOUR_TO_TICK, MINUTE_TO_TICK, SECOND_TO_TICK, 0, time.Local)
	if !nextTick.After(time.Now()) {
		nextTick = nextTick.Add(INTERVAL_PERIOD)
	}
	fmt.Println(nextTick, "- next tick")
	diff := nextTick.Sub(time.Now())
	if t.timer == nil {
		t.timer = time.NewTimer(diff)
	} else {
		t.timer.Reset(diff)
	}
}

func scheduler() {
	jobTicker := &jobTicker{}
	jobTicker.updateTimer()
	for {
		<-jobTicker.timer.C
		fmt.Println(time.Now(), "- just ticked")

		// reserve time
		users := []User{
			// Create a User here using your own Session and SessionSig that you're going to get using developer tools on the AF scheduling webapp.
			{Name: "YourName", Session: "<YOUR_SESSION>", SessionSig: "<YOU_SESSION_SIG>"},
		}

		slots, err := getTimeSlots()
		if err != nil {
			log.Fatalf("couldn't get time lots: %s", err)
		}

		for _, user := range users {
			for _, slot := range slots {
				log.Printf("scheduling %s @ %s for %s", slot.Date, slot.StartTime, user)
				if err := reserveTime(user, slot); err != nil {
					log.Fatalf("couldn't reserve time: %s", err)
				}
			}
		}

		jobTicker.updateTimer()
	}
}

func getTimeSlots() ([]TimeSlot, error) {
	// Generated by curl-to-Go: https://mholt.github.io/curl-to-go
	// Original command: curl "https://api.muuvlabs.com/anytime/clubs/3804?ran=1618271100665" -H "User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:87.0) Gecko/20100101 Firefox/87.0" -H "Accept: */*" -H "Accept-Language: en-US,en;q=0.5" --compressed -H "Referer: https://reserve.anytimefitness.com/" -H "content-type: application/json" -H "cookieproxy: session=eyJ1c2VyIjoiNjA2ZTU0ZWUwYTBmNzMwMDA3YzZkN2RmIn0=; session.sig=ivLFMSROVbJohqbGbJEIBZM1iDc" -H "Origin: https://reserve.anytimefitness.com" -H "Connection: keep-alive" -H "Cookie: session=eyJ1c2VyIjoiNjA2ZTU0ZWUwYTBmNzMwMDA3YzZkN2RmIn0=; session.sig=ivLFMSROVbJohqbGbJEIBZM1iDc" -H "TE: Trailers"
	slotsOfInterest := make([]TimeSlot, 0)

	req, err := http.NewRequest("GET", "https://api.muuvlabs.com/anytime/clubs/3804", nil)
	if err != nil {
		return slotsOfInterest, err
	}
	req.Header.Set("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:87.0) Gecko/20100101 Firefox/87.0")
	req.Header.Set("Accept", "*/*")
	req.Header.Set("Accept-Language", "en-US,en;q=0.5")
	req.Header.Set("Referer", "https://reserve.anytimefitness.com/")
	req.Header.Set("Content-Type", "application/json")
	req.Header.Set("Cookieproxy", "session=eyJ1c2VyIjoiNjA2ZTU0ZWUwYTBmNzMwMDA3YzZkN2RmIn0=; session.sig=ivLFMSROVbJohqbGbJEIBZM1iDc")
	req.Header.Set("Origin", "https://reserve.anytimefitness.com")
	req.Header.Set("Connection", "keep-alive")
	req.Header.Set("Cookie", "session=eyJ1c2VyIjoiNjA2ZTU0ZWUwYTBmNzMwMDA3YzZkN2RmIn0=; session.sig=ivLFMSROVbJohqbGbJEIBZM1iDc")
	req.Header.Set("Te", "Trailers")

	resp, err := http.DefaultClient.Do(req)
	if err != nil {
		return slotsOfInterest, err
	}
	defer resp.Body.Close()

	var club Club
	err = json.NewDecoder(resp.Body).Decode(&club)
	if err != nil {
		return slotsOfInterest, err
	}

	// Create your own schedule by changing this here. Right now it's looking for weekdays at "6:00 AM" (pay attention to how the time string is formatted)
	// except on wednesday
	for _, slot := range club.TimeSlots {
		if slot.StartTime == "6:00 AM" && slot.AdvanceSpotsOpen >= 2 {
			parsedDate, err := time.Parse("2006-01-02", slot.Date)
			if err != nil {
				return slotsOfInterest, err
			}
			// We're not scheduling on the same day. Important: this might change.
			if parsedDate.Weekday() == time.Now().Weekday() {
				continue
			}

			day := parsedDate.Weekday()
			if day != time.Wednesday && day != time.Saturday && day != time.Sunday {
				slotsOfInterest = append(slotsOfInterest, slot)
			}

		}
	}

	log.Printf("Slots found: %+v\n", slotsOfInterest)

	return slotsOfInterest, nil
}

func reserveTime(user User, slot TimeSlot) error {
	data := Payload{
		ClubIdent: ClubIdent,
		StartInt:  slot.StartInt,
	}
	payloadBytes, err := json.Marshal(data)
	if err != nil {
		return fmt.Errorf("couldn't create payload: %v", err)
	}

	body := bytes.NewReader(payloadBytes)

	req, err := http.NewRequest("POST", "https://api.muuvlabs.com/anytime/reservations", body)
	if err != nil {
		return fmt.Errorf("couldn't create request: %v", err)
	}

	req.Header.Set("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:87.0) Gecko/20100101 Firefox/87.0")
	req.Header.Set("Accept", "*/*")
	req.Header.Set("Accept-Language", "en-US,en;q=0.5")
	req.Header.Set("Referer", "https://reserve.anytimefitness.com/")
	req.Header.Set("Content-Type", "application/json")
	req.Header.Set("Origin", "https://reserve.anytimefitness.com")
	req.Header.Set("Connection", "keep-alive")

	cookie := fmt.Sprintf("session=%s; session.sig=%s", user.Session, user.SessionSig)

	req.Header.Set("Cookie", cookie)
	req.Header.Set("Te", "Trailers")

	resp, err := http.DefaultClient.Do(req)
	if err != nil {
		return fmt.Errorf("reservation request failed: %v", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != 200 {
		return fmt.Errorf("didn't get 200 OK, got %v instead.\nStatus body: %s", resp.StatusCode, resp.Status)
	}

	return nil

}

func main() {
	scheduler()
}
